{
    // Database Configuration
    "store_config":{
        // Maximum number of results fetched in one DB call.
		"max_results": 1024,

		// DB adapter name to communicate with the DB backend.
		// Must be one of the adapters from the list below.
		"use_adapter": "rethinkdb",

		// Configurations of individual adapters.
		"adapters": {
			// MySQL configuration. See https://godoc.org/github.com/go-sql-driver/mysql#Config
			// for other possible options.
			"mysql": {
				// MySQL connection settings.
				// See https://pkg.go.dev/github.com/go-sql-driver/mysql#Config for more info
				// and available fields and options.
				"User": "root",
				"Net": "tcp",
				"Addr": "localhost",
				"DBName": "rum",
				"Passwd":"",
				// The 'collation=utf8mb4_unicode_ci' is optional but highly recommended for
				// emoji and certain CJK characters.
				"Collation": "utf8mb4_unicode_ci",
				// Parse time values to time.Time. Required.
				"ParseTime": true,

				// DSN: alternative way of specifying database configuration, passed unchanged
				// to MySQL driver. See https://github.com/go-sql-driver/mysql#dsn-data-source-name for syntax.
				// DSN may optionally start with mysql://
				// "dsn": "root@tcp(localhost)/rum?parseTime=true&collation=utf8mb4_unicode_ci",

				// MySQL connection pool settings.
				// Maximum number of open connections to the database. Default: 0 (unlimited).
				"max_open_conns": 64,
				// Maximum number of connections in the idle connection pool. If negative or zero,
				// no idle connections are retained.
				"max_idle_conns": 64,
				// Maximum amount of time a connection may be reused (in seconds).
				"conn_max_lifetime": 60,

				// DB request timeout (in seconds).
				// If not set (or <= 0), DB queries and transactions will run without a timeout.
				"sql_timeout": 10
			},

			// RethinkDB configuration. See
			// https://godoc.org/github.com/rethinkdb/rethinkdb-go#ConnectOpts for other possible
			// options.
			"rethinkdb": {
				// Address(es) of RethinkDB node(s): either a string or an array of strings.
				"addresses": "localhost:28015",
				// Name of the main database.
				"database": "rum"
			},
            // Clickhouse configuration
            "clickhouse": {
                "addresses" :  "localhost:9000",
		        "username":    "default",
		        "password":    "",
		        "database": "rum",
		        "tableprefix" :""
            },
			//redisdb configuration
			// see https://pkg.go.dev/github.com/redis/go-redis/v9#Options for other configuration options
			"redis":{
				// The network type, either tcp or unix.
				// Default is tcp.
				"Network": "tcp",
				// host:port address.
				"Addresses":"",

				// ClientName will execute the `CLIENT SETNAME ClientName` command for each conn.
				"ClientName": "",

				// Protocol 2 or 3. Use the version to negotiate RESP version with redis-server.
				// Default is 3.
				"Protocol":3,
				// Use the specified Username to authenticate the current connection
				// with one of the connections defined in the ACL list when connecting
				// to a Redis 6.0 instance, or greater, that is using the Redis ACL system.
				"Username":"",
				// Optional password. Must match the password specified in the
				// requirepass server configuration option (if connecting to a Redis 5.0 instance, or lower),
				// or the User Password when connecting to a Redis 6.0 instance, or greater,
				// that is using the Redis ACL system.
				"Password":"",				

				// Database to be selected after connecting to the server.
				"DB": 0,

				// Maximum number of retries before giving up.
				// Default is 3 retries; -1 (not 0) disables retries.
				"MaxRetries": 3,		

				// Dial timeout for establishing new connections.
				// Default is 5 seconds.
				"DialTimeout":5,
				// Timeout for socket reads. If reached, commands will fail
				// with a timeout instead of blocking. Supported values:
				//   - `0` - default timeout (3 seconds).
				//   - `-1` - no timeout (block indefinitely).
				//   - `-2` - disables SetReadDeadline calls completely.
				"ReadTimeout":0,
				// Timeout for socket writes. If reached, commands will fail
				// with a timeout instead of blocking.  Supported values:
				//   - `0` - default timeout (3 seconds).
				//   - `-1` - no timeout (block indefinitely).
				//   - `-2` - disables SetWriteDeadline calls completely.
				"WriteTimeout":0,
				// ContextTimeoutEnabled controls whether the client respects context timeouts and deadlines.
				// See https://redis.uptrace.dev/guide/go-redis-debugging.html#timeouts
				"ContextTimeoutEnabled":false,

				// Type of connection pool.
				// true for FIFO pool, false for LIFO pool.
				// Note that FIFO has slightly higher overhead compared to LIFO,
				// but it helps closing idle connections faster reducing the pool size.
				"PoolFIFO": false,
				// Base number of socket connections.
				// Default is 10 connections per every available CPU as reported by runtime.GOMAXPROCS.
				// If there is not enough connections in the pool, new connections will be allocated in excess of PoolSize,
				// you can limit it through MaxActiveConns
				"PoolSize":10,
				// Amount of time client waits for connection if all connections
				// are busy before returning an error.
				// Default is ReadTimeout + 1 second.
				"PoolTimeout":15,
				// Minimum number of idle connections which is useful when establishing
				// new connection is slow.
				// Default is 0. the idle connections are not closed by default.
				"MinIdleConns":0,
				// Maximum number of idle connections.
				// Default is 0. the idle connections are not closed by default.
				"MaxIdleConns":0,
				// Maximum number of connections allocated by the pool at a given time.
				// When zero, there is no limit on the number of connections in the pool.
				"MaxActiveConns":0 ,
				// ConnMaxIdleTime is the maximum amount of time a connection may be idle.
				// "Should be less than server's timeout."
				//
				// Expired connections may be closed lazily before reuse.
				// "If d <= 0, connections are not closed due to a connection's idle time."
				//
				// Default is 30 minutes. -1 disables idle timeout check.
				"ConnMaxIdleTime": -1,
				// ConnMaxLifetime is the maximum amount of time a connection may be reused.
				//
				// Expired connections may be closed lazily before reuse.
				// "If <= 0, connections are not closed due to a connection's age."
				//
				// Default is to not close idle connections.
				"ConnMaxLifetime":0,

				// Disable set-lib on connect. Default is false.
				"DisableIndentity":"",
				// Connect cluster
				"ConnectCluster": false,
				// "Driver's TLS configuration. Uncomment to enable TLS."
				// "tls": true,

				// Path to the client certificate. Optional.
				// "tls_cert_file": "/path/to/cert_file",

				// Path to private key. Optional.
				// "tls_private_key": "/path/to/private_key",

				// Specifies whether or not certificates and hostnames received from the server should be validated.
				// Not recommended to enable in production. Default is false.
				// "tls_skip_verify": false
				//connection string
				"uri":"",
			}

		}
	},

	//Backup configuration
	"backup":{
		"BRUM_BACKUP_ENABLE":false,
		"BRUM_BACKUP_DIRECTORY":"",
		"BRUM_BACKUP_INTERVAL_SECONDS":5,
		"BRUM_COMPRESSION_TYPE":"GZIP",
		"BRUM_COMPRESSION_LEVEL": "",
		
	},
	"subsription":{
	"BRUM_SUBSCRIPTION_ENABLED":false
	},
	"server":{
		"BRUM_SERVER_PORT":"",
		"BRUM_SERVER_SSL":false,
		"BRUM_SERVER_SSL_TYPE":"",
		"BRUM_SERVER_SSL_CERT_FILE":"",
		"BRUM_SERVER_SSL_KEY_FILE":"",
		"BRUM_SERVER_SSL_LETS_ENCRYPT_DOMAIN":"",
		"BRUM_PRIVATE_API_TOKEN":"",

	}


}
